Example-1
---------------------
public class Calculator
{
	public int square(int i) 
	{
		return i*i;
	}
	public String user(String string) 
	{
		return "kundan";
	}
	public String concat(String string, String string2) {
		
		return string+string2;
	}

	public int sub(int i, int j) {
		
		return i-j;
	}

	public int add(int i, int j) {
		
		return i+j;
	}

	public static boolean isSafe() {
		
		return false;
	}

}
------------------------------------------------------
import static org.junit.Assert.*;
import org.junit.Test;
public class CalculatorTest 
{
	Calculator cal=new Calculator();
	@Test  //Used to identify that a method is a test method

	public void testSquares()
	{
		
		assertEquals(25,cal.square(5));
		assertEquals(5*5,cal.square(5));
		
	}
	
	@Test
	public void testUser()
	{
		assertEquals("kundan",cal.user("kundan"));
	}
	
	@Test
	public void stringtest1()
	{
	String result = cal.concat("Hello", "World");
	assertEquals("HelloWorld", result);
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2); 
	}
	
	
}
-------------------------------------------------------------------
Example-2
------------------------
import static org.junit.Assert.*;
import org.junit.Test; 
public class TestAssertions 
{ 
 @Test  
 public void testAssertions()
 {       
//test data   
    String str1 = new String ("abc"); 
      String str2 = new String ("abc");   
    String str3 = null;    
   String str4 = "abc";   
    String str5 = "abc";     
  int val1 = 5;     
  int val2 = 6;       
String[] expectedArray = {"one", "two", "three"};      
 String[] resultArray =  {"one", "two", "three"};  
      //Check that two objects are equal     
  assertEquals(str1, str2);  
      //Check that a condition is true      
 assertTrue (val1 < val2);  
      //Check that a condition is false    
   assertFalse(val1 > val2);  
      //Check that an object isn't null      
 assertNotNull(str1);  
      //Check that an object is null      
 assertNull(str3);  
      //Check if two object references point to the same object      
 assertSame(str4,str5);  
      //Check if two object references not point to the same object   
    assertNotSame(str1,str3);  
      //Check whether two arrays are equal to each other.      
 assertArrayEquals(expectedArray, resultArray);   
 } 
} 
----------------------------------------------------------------------------
Example-3
-------------------
public class Calculation1 {  
  
    public static int findMax(int arr[])
    {  
        int max=0;  
        for(int i=1;i<arr.length;i++)
        {  
            if(max<arr[i])  
                max=arr[i];  
        }  
        return max;  
    }  
}  
------------------------------------
import static org.junit.Assert.*;  
 
import org.junit.Test;  
  
public class TestLogic {  
  
    @Test  
    public void testFindMax(){  
        assertEquals(4,Calculation1.findMax(new int[]{1,3,4,2}));  
        assertEquals(14,Calculation1.findMax(new int[]{11,13,14,12}));  
         
    }  
}  
-------------------------------------------------------------------------
Example-4
------------------------
//This is to check failure condition in the whole class.(TestAssertions.class)
import org.junit.runner.JUnitCore; 
import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;  
public class TestRunner2
 {  
  public static void main(String[] args)
 {     
  Result result = JUnitCore.runClasses(TestAssertions.class); 
      for (Failure failure : result.getFailures()) 
{         
 System.out.println(failure.toString());  
     }     
  System.out.println(result.wasSuccessful());  
  } 
}  
-----------------------------------------------------------------------
Example-5
-----------------------
@BeforeClass annotation specifies that method will be invoked only once, before starting all the tests.

@Before annotation specifies that method will be invoked before each test.

@After annotation specifies that method will be invoked after each test.

@AfterClass annotation specifies that method will be invoked only once, after finishing all the tests.
--------------------------------------------------------------------------------------
import java.util.StringTokenizer;

public class Calculation2 {  
    //method that returns maximum number  
    public static int findMax(int arr[]){  
        int max=0;  
        for(int i=1;i<arr.length;i++){  
            if(max<arr[i])  
                max=arr[i];  
        }  
        return max;  
    }  
    //method that returns cube of the given number  
    public static int cube(int n){  
        return n*n*n;  
    }  
    //method that returns reverse words   
    public static String reverseWord(String str){  
  
        StringBuilder result=new StringBuilder();  
        StringTokenizer tokenizer=new StringTokenizer(str," ");  
  
        while(tokenizer.hasMoreTokens()){  
        StringBuilder sb=new StringBuilder();  
        sb.append(tokenizer.nextToken());  
        sb.reverse();  
  
        result.append(sb);  
        result.append(" ");  
        }  
        return result.toString();  
    }  
}  
===============================================
import static org.junit.Assert.assertEquals;  
import org.junit.After;  
import org.junit.AfterClass;  
import org.junit.Before;  
import org.junit.BeforeClass;  
import org.junit.Test;  

  
public class TestCase2 {  
  
    @BeforeClass  
    public static void setUpBeforeClass() throws Exception {  
        System.out.println("before class");  
    }  
    @Before  
    public void setUp() throws Exception {  
        System.out.println("before");  
    }  
  
    @Test  
    public void testFindMax(){  
        System.out.println("test case find max");  
        assertEquals(4,Calculation1.findMax(new int[]{1,3,4,2}));  
           }  
    @Test  
    public void testCube(){  
        System.out.println("test case cube");  
        assertEquals(27,Calculation1.cube(3));  
    }  
    @Test  
    public void testReverseWord(){  
        System.out.println("test case reverse word");  
        assertEquals("ym eman si nahk",Calculation1.reverseWord("my name is khan"));  
    }  
    @After  
    public void tearDown() throws Exception {  
        System.out.println("after");  
    }  
  
    @AfterClass  
    public static void tearDownAfterClass() throws Exception {  
        System.out.println("after class");  
    }  
  
}  
-----------------------------------------------------------------